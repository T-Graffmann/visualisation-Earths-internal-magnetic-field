function [BzF] = CalcBzF(Pnm,Coeff,Phi,sizTheta,sizPhi,Nmin,Nmax,gpointer,hpointer,A,R)
%CalcBzF calculates the radial component of the magnetic field
%generated by the Geodynamo.
%   
%   INPUT:
%       Pnm:    array of Schmidt normalised associated Legendre
%               polynomials. It is given as a 3 dimensional array.
%     Coeff:    array containing Gaussian coefficients
%       Phi:    array containing the linspace of longitude phi
%  sizTheta:    size of linspace for colatitude theta
%    sizPhi:    size of Phi
%      Nmin:    smallest visualised n
%      Nmax:    larges visualised n
%  gpointer:    array containing positions of Gaussian coefficients g with
%               their postions correlating to their respective n and m+1
%  hpointer:    array containing positions of Gaussian coefficients h with
%               their postions correlating to their respective n and m
%         A:    Earth's reference radius
%         R:    radius of sphere corresponding to height of observation
%
%  OUTPUT:
%    BzFnew:    2-D array containing values of z-component of core
%               contribution to the magnetic field at all positions of the
%               grid.
%   WHAT IT DOES:
%               Initially the derivative with respect to r is set up as an
%               anonymous function. Within the for-loops the input
%               variables are put into the function and an array of
%               calculated values for the grid is generated.

itheta=1:sizTheta;
diffr=@(N,M,PHI,PNM,G,H) (N+1)*(A/R)^(N+2)*(cos(PHI.*M).*G+sin(PHI.*M).*H).*PNM;

for in=Nmin:Nmax
    im=1:in;
    parfor iphi=1:sizPhi
       Bz(itheta,iphi,in)=diffr(in,0,Phi(iphi),Pnm(1,1.*itheta,in),Coeff(gpointer(1,in),1),0)...
         +sum(diffr(in,1.*im(:),Phi(iphi),Pnm(1.+im,1.*itheta,in),Coeff(gpointer(1.+im,in),1),Coeff(hpointer(1.*im,in),1)),1);
   end% PARFOR loop over all phi
end% FOR loop over all n
 BzF=sum(Bz(:,:,:),3);
end% FUNCTION